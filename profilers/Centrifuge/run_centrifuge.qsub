#!/bin/bash -l

# Set SCC project
#$ -P pathoscope

# Specify hard time limit for the job. 
#   The job will be aborted if it runs longer than this time.
#   The default time is 12 hours
#$ -l h_rt=100:00:00

# Send an email when the job finishes or if it is aborted (by default no email is sent).
#$ -m a

# Give job a name
#$ -N centrifuge

# Request cores
#$ -pe omp 8

# Memory overall
#$ -l mem_total=150G

# Memory per core
#$ -l mem_per_core=11G

# Combine output and error files into a single file
#$ -j y

# Specify the output file name
#$ -o run_centrifuge.qlog

# Submit an array job with N tasks 
#$ -t 1-7

# ask for scratch space
#$ -l scratch=100G

# Use SGE_TASK_ID env variable to select appropriate input file from bash array
# Bash array index starts from 0, so need to subtract one from SGE_TASK_ID value

# Keep track of information related to the current job
echo "=========================================================="
echo "Start date : $(date)"
echo "Job name : $JOB_NAME"
echo "Job ID : $SGE_TASK_ID"
echo "=========================================================="
start_time=$(date +%s)
NTHREADS=8

stem=/restricted/projectnb/pathoscope/work/aubrey/newMB_02_25_meta_benchmark
mapfile -t inputFastqFiles < ${stem}/MeSS_code/mess_manifest_test.txt
index=$(($SGE_TASK_ID-1))
dataDir="${inputFastqFiles[$index]%/*}"
sampleType=$(basename "$(dirname "$dataDir")")
sampleName=($(echo ${inputFastqFiles[$index]##*/} | sed 's/_R1.*//'))

### get read files
readPath1=$dataDir/${sampleName}_R1.fq.gz
readPath2=$dataDir/${sampleName}_R2.fq.gz

# Path to Centrifuge files
CENTRIFUGE_HOME=${stem}/code/centrifuge-1.0.4.2
db_loc="${stem}/db/centrifuge/p_compressed+h+v"

# Dir to save output files
outDir="${stem}/profilers/Centrifuge/outputs/${sampleType}"
mkdir -p "$outDir"

# Run centrifuge
$CENTRIFUGE_HOME/centrifuge -x $db_loc \
    -k 18 \
    --seed 55 \
    -1 $readPath1 \
    -2 $readPath2 \
    -p $NTHREADS \
    --report-file ${outDir}/${sampleName}_summary.tsv \
    -S ${outDir}/${sampleName}_report.txt
    
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Execution Time: ${elapsed_time} seconds" >> ${outDir}/${sampleName}_timing.txt
